<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on reticulating splines</title><link>https://sbarbett.github.io/reticulating-splines/posts/</link><description>Recent content in Posts on reticulating splines</description><generator>Hugo</generator><language>en</language><lastBuildDate>Wed, 27 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://sbarbett.github.io/reticulating-splines/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Relocating My Blog to Github Pages</title><link>https://sbarbett.github.io/reticulating-splines/posts/relocating-my-blog-to-github-pages/</link><pubDate>Wed, 27 Aug 2025 00:00:00 +0000</pubDate><guid>https://sbarbett.github.io/reticulating-splines/posts/relocating-my-blog-to-github-pages/</guid><description>&lt;h1 id="relocating-my-blog-to-github-pages">Relocating My Blog to GitHub Pages&lt;/h1>
&lt;p>I am a man who is easily distracted (clearly, it&amp;rsquo;s been six months since I last posted here). I like to experiment with things, and creating this blog was largely an experiment with Hugo and Docker. Here are a couple of notes about me:&lt;/p>
&lt;ol>
&lt;li>I dislike rich text editors&lt;/li>
&lt;li>I am not fond of HTML or CSS&lt;/li>
&lt;li>I like writing in Markdown; I think it&amp;rsquo;s efficient&lt;/li>
&lt;li>I like Git&lt;/li>
&lt;li>I like things that are free&lt;/li>
&lt;/ol>
&lt;p>If I was going to start a blog and update it with any regularity, I needed it to be dead simple. I wanted to write in Markdown, commit that Markdown to a repository, and have it magically turned into a webpage—which is easier said than done, it seems. This is how I came across Hugo.&lt;/p></description></item><item><title>Playing With My PiHoles</title><link>https://sbarbett.github.io/reticulating-splines/posts/playing-with-my-piholes/</link><pubDate>Sat, 22 Feb 2025 00:00:00 +0000</pubDate><guid>https://sbarbett.github.io/reticulating-splines/posts/playing-with-my-piholes/</guid><description>&lt;h1 id="playing-with-my-piholes">Playing With My PiHoles&lt;/h1>
&lt;p>Last weekend, the PiHole team dropped a major update – PiHole v6. This version completely re-architects the project. They’ve updated the web server, overhauled the APIs and interface, and added a few new features. It looks pretty solid on paper, but I’m not ready to roll it out on my production Raspberry Pis until I’m sure all the kinks are worked out. From what I’m seeing on Reddit, there’s still plenty to fix. That won’t stop me from tinkering, though.&lt;/p></description></item><item><title>Ansible Playbooks for Proxmox and LXCs Part 5</title><link>https://sbarbett.github.io/reticulating-splines/posts/ansible-playbooks-for-proxmox-lxcs-pt5/</link><pubDate>Mon, 17 Feb 2025 00:00:00 +0000</pubDate><guid>https://sbarbett.github.io/reticulating-splines/posts/ansible-playbooks-for-proxmox-lxcs-pt5/</guid><description>&lt;h1 id="ansible-playbooks-for-proxmox-and-lxcs---part-5">Ansible Playbooks for Proxmox and LXCs - Part 5&lt;/h1>
&lt;p>This role is a complete disappointment and defies Ansible best practices. Philosophically speaking, a role should focus on doing a single task well and not be all over the place. Therefore, I&amp;rsquo;m going to split up the functionality we&amp;rsquo;ve created thus far into separate roles and move some things around.&lt;/p>
&lt;h2 id="adding-a-couple-things-to-the-vault">Adding a Couple Things to the Vault&lt;/h2>
&lt;p>All properties pertaining specifically to the Proxmox instance itself (not container settings) should be stored in the vault. Most of our Proxmox-related values are already in the vault, but I&amp;rsquo;d previously put the &lt;code>proxmox_api_host&lt;/code> and &lt;code>proxmox_node&lt;/code> in my role defaults. I&amp;rsquo;m simply moving those to the vault. Edit your vault with the following:&lt;/p></description></item><item><title>Ansible Playbooks for Proxmox and LXCs Part 4</title><link>https://sbarbett.github.io/reticulating-splines/posts/ansible-playbooks-for-proxmox-lxcs-pt4/</link><pubDate>Sun, 16 Feb 2025 00:00:00 +0000</pubDate><guid>https://sbarbett.github.io/reticulating-splines/posts/ansible-playbooks-for-proxmox-lxcs-pt4/</guid><description>&lt;h1 id="ansible-playbooks-for-proxmox-and-lxcs---part-4">Ansible Playbooks for Proxmox and LXCs - Part 4&lt;/h1>
&lt;p>I like to run stuff inside Docker (I know, some people have a visceral aversion to this. Whatever.), so in addition to the basic setup and tweaks, the most common thing I&amp;rsquo;m doing when I spin up a VM is &lt;a href="https://docs.docker.com/engine/install/debian/">going through the Docker setup process&lt;/a>. I&amp;rsquo;ve done this so many times I think I could install Docker blindfolded at this point—so let&amp;rsquo;s automate things.&lt;/p></description></item><item><title>Ansible Playbooks for Proxmox and LXCs Part 3</title><link>https://sbarbett.github.io/reticulating-splines/posts/ansible-playbooks-for-proxmox-lxcs-pt3/</link><pubDate>Fri, 14 Feb 2025 00:00:00 +0000</pubDate><guid>https://sbarbett.github.io/reticulating-splines/posts/ansible-playbooks-for-proxmox-lxcs-pt3/</guid><description>&lt;h1 id="ansible-playbooks-for-proxmox-and-lxcs---part-3">Ansible Playbooks for Proxmox and LXCs - Part 3&lt;/h1>
&lt;p>In this episode, we&amp;rsquo;re finally going to get into the LXC we&amp;rsquo;ve created and start configuring it with Ansible. We&amp;rsquo;ll add it dynamically as a host, SSH into it, install some software, and more.&lt;/p>
&lt;h2 id="adding-a-dynamic-host">Adding a Dynamic Host&lt;/h2>
&lt;p>In my last post, I outlined a strategy for acquiring the dynamically assigned IP address from the LXC once it&amp;rsquo;s been spun up. Now, we need to add that IP address to our Ansible hosts. In &lt;code>roles/proxmox_lxc/tasks/main.yml&lt;/code>, add the following:&lt;/p></description></item><item><title>Ansible Playbooks for Proxmox and LXCs Part 2</title><link>https://sbarbett.github.io/reticulating-splines/posts/ansible-playbooks-for-proxmox-lxcs-pt2/</link><pubDate>Wed, 12 Feb 2025 00:00:00 +0000</pubDate><guid>https://sbarbett.github.io/reticulating-splines/posts/ansible-playbooks-for-proxmox-lxcs-pt2/</guid><description>&lt;h1 id="ansible-playbooks-for-proxmox-and-lxcs---part-2">Ansible Playbooks for Proxmox and LXCs - Part 2&lt;/h1>
&lt;p>I want to continue building on the state-driven modularity of tasks in this Proxmox role. In addition to &lt;code>present&lt;/code> (the default state) and &lt;code>absent&lt;/code>, Proxmox supports the following states:&lt;/p>
&lt;ul>
&lt;li>&lt;code>started&lt;/code>&lt;/li>
&lt;li>&lt;code>stopped&lt;/code>&lt;/li>
&lt;li>&lt;code>restarted&lt;/code>&lt;/li>
&lt;li>&lt;code>template&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>By having the state variable drive the behavior, we implicitly declare the desired outcome. This aligns with Ansible&amp;rsquo;s idempotent design—where the playbook converges the system to the desired state instead of running a series of imperative commands.&lt;/p></description></item><item><title>Ansible Playbooks for Proxmox and LXCs Part 1</title><link>https://sbarbett.github.io/reticulating-splines/posts/ansible-playbooks-for-proxmox-lxcs/</link><pubDate>Sun, 09 Feb 2025 00:00:00 +0000</pubDate><guid>https://sbarbett.github.io/reticulating-splines/posts/ansible-playbooks-for-proxmox-lxcs/</guid><description>&lt;h1 id="ansible-playbooks-for-proxmox-and-lxcs---part-1">Ansible Playbooks for Proxmox and LXCs - Part 1&lt;/h1>
&lt;p>Over the past week, I&amp;rsquo;ve been tinkering with Ansible at work, and it got me thinking about how I can use this tool to make life easier in my homelab. Ansible is a way of turning tasks that usually require a bunch of complicated scripting into something more straightforward. Additionally, with collections, you can integrate directly with APIs without having to reinvent the wheel.&lt;/p></description></item><item><title>Deploying an OCI Pi-hole with Terraform</title><link>https://sbarbett.github.io/reticulating-splines/posts/terraform-oci-pihole/</link><pubDate>Sun, 02 Feb 2025 00:00:00 +0000</pubDate><guid>https://sbarbett.github.io/reticulating-splines/posts/terraform-oci-pihole/</guid><description>&lt;h1 id="deploying-an-oci-pi-hole-with-terraform">Deploying an OCI Pi-hole with Terraform&lt;/h1>
&lt;p>The other day, I wrote about deploying a Pi-hole on an Oracle Cloud VM alongside Unbound and WireGuard. In that post, I explained how to set everything up manually through the web interface and CLI. This time, I wanted to automate the deployment using a shell script and OCI&amp;rsquo;s Terraform module.&lt;/p>
&lt;h2 id="terraform">Terraform&lt;/h2>
&lt;p>Terraform is an infrastructure-as-code tool that lets you define and provision infrastructure through configuration files. Instead of manually setting up resources, you can describe them in a script, and Terraform will handle the provisioning.&lt;/p></description></item><item><title>Setting Up a Pi-hole with WireGuard on an Always Free Oracle Cloud VM</title><link>https://sbarbett.github.io/reticulating-splines/posts/oracle-cloud-unbound-pihole/</link><pubDate>Thu, 30 Jan 2025 00:00:00 +0000</pubDate><guid>https://sbarbett.github.io/reticulating-splines/posts/oracle-cloud-unbound-pihole/</guid><description>&lt;h1 id="setting-up-a-pihole-with-wireguard-on-an-always-free-oracle-cloud-vm">Setting Up a Pihole with Wireguard on an Always Free Oracle Cloud VM&lt;/h1>
&lt;p>About a week ago, I discovered that Oracle Cloud offers a free tier of virtual machines—not in the AWS &amp;ldquo;free for a year&amp;rdquo; sense, but free indefinitely (allegedly). The x86 instances come with 1GB of RAM and 1 vCPU, which isn’t much, but it’s enough for some basic workloads. I like to think of it as a Raspberry Pi Zero in the cloud.&lt;/p></description></item></channel></rss>