<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Terraform on reticulating splines</title><link>https://sbarbett.github.io/reticulating-splines/tags/terraform/</link><description>Recent content in Terraform on reticulating splines</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 02 Feb 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://sbarbett.github.io/reticulating-splines/tags/terraform/index.xml" rel="self" type="application/rss+xml"/><item><title>Deploying an OCI Pi-hole with Terraform</title><link>https://sbarbett.github.io/reticulating-splines/posts/terraform-oci-pihole/</link><pubDate>Sun, 02 Feb 2025 00:00:00 +0000</pubDate><guid>https://sbarbett.github.io/reticulating-splines/posts/terraform-oci-pihole/</guid><description>&lt;h1 id="deploying-an-oci-pi-hole-with-terraform">Deploying an OCI Pi-hole with Terraform&lt;/h1>
&lt;p>The other day, I wrote about deploying a Pi-hole on an Oracle Cloud VM alongside Unbound and WireGuard. In that post, I explained how to set everything up manually through the web interface and CLI. This time, I wanted to automate the deployment using a shell script and OCI&amp;rsquo;s Terraform module.&lt;/p>
&lt;h2 id="terraform">Terraform&lt;/h2>
&lt;p>Terraform is an infrastructure-as-code tool that lets you define and provision infrastructure through configuration files. Instead of manually setting up resources, you can describe them in a script, and Terraform will handle the provisioning.&lt;/p></description><content>&lt;h1 id="deploying-an-oci-pi-hole-with-terraform">Deploying an OCI Pi-hole with Terraform&lt;/h1>
&lt;p>The other day, I wrote about deploying a Pi-hole on an Oracle Cloud VM alongside Unbound and WireGuard. In that post, I explained how to set everything up manually through the web interface and CLI. This time, I wanted to automate the deployment using a shell script and OCI&amp;rsquo;s Terraform module.&lt;/p>
&lt;h2 id="terraform">Terraform&lt;/h2>
&lt;p>Terraform is an infrastructure-as-code tool that lets you define and provision infrastructure through configuration files. Instead of manually setting up resources, you can describe them in a script, and Terraform will handle the provisioning.&lt;/p>
&lt;p>To use it, you&amp;rsquo;ll need to install the &lt;code>terraform&lt;/code> client. On Arch Linux:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>pacman -S terraform
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># ...or use your pacman wrapper, like paru&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I haven&amp;rsquo;t installed Terraform on macOS or Windows myself, but you can find installation instructions in &lt;a href="https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli">Hashicorp&amp;rsquo;s documentation&lt;/a>.&lt;/p>
&lt;h2 id="installing-the-oci-cli">Installing the OCI CLI&lt;/h2>
&lt;p>The Oracle Cloud Infrastructure (OCI) CLI isn&amp;rsquo;t strictly required for this setup, but it can be helpful. You can find installation instructions in &lt;a href="https://docs.oracle.com/en-us/iaas/Content/API/SDKDocs/cliinstall.htm">Oracle&amp;rsquo;s docs&lt;/a>.&lt;/p>
&lt;p>On Arch, install it with:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>pacman -S oci-cli
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once installed, you can run the guided configuration setup:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>oci setup config
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="manual-config-setup">Manual Config Setup&lt;/h2>
&lt;p>I wasn&amp;rsquo;t initially aware of the CLI’s guided setup, so I configured everything manually. If you&amp;rsquo;d prefer to do the same, follow these steps:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>In the OCI web interface, go to your profile and look for the &lt;strong>API Keys&lt;/strong> section.&lt;/p>
&lt;p>&lt;img src="../../img/oci-api-key-1.jpg" alt="Screenshot of API keys">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Click &lt;strong>Add API Key&lt;/strong>. You&amp;rsquo;ll be prompted to download your key files—make sure to download at least the private key.&lt;/p>
&lt;p>&lt;img src="../../img/oci-api-key-2.jpg" alt="Screenshot of API key download card">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Move the private key to your &lt;code>~/.ssh&lt;/code> directory, rename it to something like &lt;code>oci-api.pem&lt;/code>, and adjust its permissions:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mv path/to/downloaded-key ~/.ssh/oci-api.pem
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>chmod &lt;span style="color:#ae81ff">600&lt;/span> ~/.ssh/oci-api.pem
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>After clicking &lt;strong>Add&lt;/strong>, you&amp;rsquo;ll be presented with a configuration file.&lt;/p>
&lt;p>&lt;img src="../../img/oci-api-key-3.jpg" alt="Screenshot of config file">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Save this configuration file as &lt;code>~/.oci/config&lt;/code> and update the key file path inside it to match your private key location:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>key_file&lt;span style="color:#f92672">=&lt;/span>~/.ssh/oci-api.pem
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="testing">Testing&lt;/h3>
&lt;p>To verify that the OCI CLI is working correctly, run a few test commands.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>oci iam availability-domain list --compartment-id &amp;lt;your_compartment_ocid&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This command lists the availability domains associated with your account. You can find your &lt;strong>compartment OCID&lt;/strong> in the &lt;strong>Identity&lt;/strong> section of the OCI web interface. (You can also retrieve it via the CLI, but I found it easier to use the UI.)&lt;/p>
&lt;p>&lt;img src="../../img/compartment-id.jpg" alt="Screenshot of compartment">&lt;/p>
&lt;p>Next, you can list available compute instance types:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>oci compute instance list --compartment-id &amp;lt;your_compartment_ocid&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This command returns a list of instance types. Take note of this information, as you&amp;rsquo;ll need it when setting up the Terraform module.&lt;/p>
&lt;h2 id="setting-up-the-module">Setting Up the Module&lt;/h2>
&lt;p>First, download the Terraform scripts &lt;a href="https://github.com/sbarbett/pihole-terraform">from GitHub&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone https://github.com/sbarbett/pihole-terraform.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd pihole-terraform
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You&amp;rsquo;ll need to create a &lt;code>terraform.tfvars&lt;/code> file containing the following values:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>region &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;us-ashburn-1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>compartment_id &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;ocid1.tenancy.oc1..uniqueID&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>availability_domain &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;uPHd:US-ASHBURN-AD-2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ubuntu_image_ocid &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;ocid1.image.oc1.iad.uniqueID&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>public_key_path &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;~/.ssh/ubuntu-pihole.key.pub&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>private_key_path &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;~/.ssh/ubuntu-pihole.key&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let&amp;rsquo;s go over each of these values.&lt;/p>
&lt;h3 id="region">Region&lt;/h3>
&lt;p>If you&amp;rsquo;re using a &lt;strong>free tier&lt;/strong> account, you only have access to one region—the one you selected when setting up your Oracle Cloud account.&lt;/p>
&lt;h3 id="compartment-id">Compartment ID&lt;/h3>
&lt;p>This is the &lt;strong>compartment OCID&lt;/strong> you retrieved earlier. It should be the compartment where you want to deploy the instance.&lt;/p>
&lt;h3 id="availability-domain">Availability Domain&lt;/h3>
&lt;p>This can be a bit tricky. Each region has multiple &lt;strong>availability domains&lt;/strong>, but &amp;ldquo;always free&amp;rdquo; instances may not be available in every one. For example, in the &lt;strong>Ashburn region&lt;/strong>, I couldn&amp;rsquo;t create free-tier instances in &lt;strong>AD-1&lt;/strong> and had to switch to &lt;strong>AD-2&lt;/strong> instead.&lt;/p>
&lt;h3 id="ubuntu-image-ocid">Ubuntu Image OCID&lt;/h3>
&lt;p>The &lt;strong>OCID&lt;/strong> of the Ubuntu base image from your object storage. You can find it on the OCI image selection page.&lt;/p>
&lt;p>&lt;img src="../../img/image-ocid.jpg" alt="Screenshot of image page">&lt;/p>
&lt;h3 id="publicprivate-keys">Public/Private Keys&lt;/h3>
&lt;p>Generate a new SSH key pair for your instance:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ssh-keygen -t rsa -b &lt;span style="color:#ae81ff">4096&lt;/span> -C &lt;span style="color:#e6db74">&amp;#34;ubuntu-pihole&amp;#34;&lt;/span> -f ~/.ssh/ubuntu-pihole.key
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will create two files:&lt;/p>
&lt;ul>
&lt;li>&lt;code>~/.ssh/ubuntu-pihole.key.pub&lt;/code> &lt;em>(public key)&lt;/em>&lt;/li>
&lt;li>&lt;code>~/.ssh/ubuntu-pihole.key&lt;/code> &lt;em>(private key)&lt;/em>&lt;/li>
&lt;/ul>
&lt;p>Set the correct permissions for the private key:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>chmod &lt;span style="color:#ae81ff">600&lt;/span> ~/.ssh/ubuntu-pihole.key
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="deploying">Deploying&lt;/h2>
&lt;p>Once your config has been set up, deploy your VM using the &lt;code>terraform&lt;/code> CLI.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Initialize Terraform:&lt;/strong>
This sets up Terraform and downloads the necessary provider plugins.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>terraform init
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>Review the Execution Plan:&lt;/strong>
This previews the changes Terraform will make.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>terraform plan
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>Apply the Configuration:&lt;/strong>
This actually provisions the resources.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>terraform apply
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>If everything is configured correctly, Terraform will:&lt;/p>
&lt;ul>
&lt;li>Deploy your VM with the necessary ingress firewall rules.&lt;/li>
&lt;li>Copy &lt;code>setup.sh&lt;/code> to the instance and execute it.&lt;/li>
&lt;li>Deploy the required containers.&lt;/li>
&lt;li>Automatically copy the WireGuard configuration file to &lt;code>~/.wireguard/wg-pihole.conf&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>Once the setup is complete, you can use your WireGuard client to connect to the VPN. For additional details, see &lt;a href="https://sbarbett.github.io/reticulating-splines/posts/oracle-cloud-unbound-pihole/">my other post&lt;/a>.&lt;/p>
&lt;h2 id="deprovisioning">Deprovisioning&lt;/h2>
&lt;p>To remove the instance and all associated resources, use the following command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>terraform destroy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will tear down everything Terraform created, including the VM and any related services.&lt;/p></content></item></channel></rss>